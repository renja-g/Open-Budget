// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url  	= env("DATABASE_URL")
  // If you use Prisma Migrate, specify a URL for the Prisma shadow database
  // https://neon.tech/docs/guides/prisma/#configure-a-shadow-database-for-prisma-migrate
  // shadowDatabaseUrl = env(“SHADOW_DATABASE_URL”)
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model User {
    id            String     @id @default(cuid())
    name          String?
    email         String?    @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    deposits      Deposit[]
    labels        Label[]
    expenses      Expense[]
    revenues      Revenue[]
    transfers     Transfer[]
    budgets       Budget[]
}

model Deposit {
    id            String       @id @default(cuid())
    uerId         String
    deposit_type  depositTypes
    name          String
    description   String?
    balance       Float
    created_at    DateTime     @default(now())
    updated_at    DateTime     @default(now()) @updatedAt
    user          User         @relation(fields: [uerId], references: [id], onDelete: Cascade)
    expenses      Expense[]
    revenues      Revenue[]
    fromTransfers Transfer[]   @relation("from_Deposit")
    toTransfers   Transfer[]   @relation("to_Deposit")
}

model Label {
    id          String     @id @default(cuid())
    uerId       String
    label_type  labelTypes
    name        String
    description String?
    created_at  DateTime   @default(now())
    updated_at  DateTime   @default(now()) @updatedAt
    user        User       @relation(fields: [uerId], references: [id], onDelete: Cascade)
    expenses    Expense[]
    revenues    Revenue[]
    transfers   Transfer[]
    budgets     Budget[]
}

model Expense {
    id          String   @id @default(cuid())
    uerId       String
    deposit_id  String
    label_ids   Label[]
    name        String
    description String?
    amount      Float
    date        DateTime
    created_at  DateTime @default(now())
    updated_at  DateTime @default(now()) @updatedAt
    user        User     @relation(fields: [uerId], references: [id], onDelete: Cascade)
    deposit     Deposit  @relation(fields: [deposit_id], references: [id], onDelete: Cascade)
}

model Revenue {
    id          String   @id @default(cuid())
    uerId       String
    deposit_id  String
    label_ids   Label[]
    name        String
    description String?
    amount      Float
    date        DateTime
    created_at  DateTime @default(now())
    updated_at  DateTime @default(now()) @updatedAt
    user        User     @relation(fields: [uerId], references: [id], onDelete: Cascade)
    deposit     Deposit  @relation(fields: [deposit_id], references: [id], onDelete: Cascade)
}

model Transfer {
    id              String   @id @default(cuid())
    uerId           String
    from_Deposit_id String
    to_Deposit_id   String
    label_ids       Label[]
    name            String
    description     String?
    amount          Float
    fee             Float
    date            DateTime
    created_at      DateTime @default(now())
    updated_at      DateTime @default(now()) @updatedAt
    user            User     @relation(fields: [uerId], references: [id], onDelete: Cascade)
    from_Deposit    Deposit  @relation("from_Deposit", fields: [from_Deposit_id], references: [id])
    to_Deposit      Deposit  @relation("to_Deposit", fields: [to_Deposit_id], references: [id])
}

model Budget {
    id          String   @id @default(cuid())
    uerId       String
    label_ids   Label[]
    name        String
    description String?
    amount      Float
    progress    Float
    created_at  DateTime @default(now())
    updated_at  DateTime @default(now()) @updatedAt
    user        User     @relation(fields: [uerId], references: [id], onDelete: Cascade)
    }

enum depositTypes {
    CURRENT
    CASH
    CREDIT
    OTHER
}

enum labelTypes {
    REVENUE
    EXPENSE
    TRANSFER
    BUDGET
}